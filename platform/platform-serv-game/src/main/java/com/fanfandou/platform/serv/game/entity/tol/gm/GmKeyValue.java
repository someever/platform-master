// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package com.fanfandou.platform.serv.game.entity.tol.gm;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;
import io.protostuff.UninitializedMessageException;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Objects;

@Generated("java_bean")
public final class GmKeyValue implements Externalizable, Message<GmKeyValue>, Schema<GmKeyValue>
{

    public static Schema<GmKeyValue> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static GmKeyValue getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final GmKeyValue DEFAULT_INSTANCE = new GmKeyValue();

    
    private Integer mParam;
    private Long mValueUint64;
    private Long mValueInt64;
    private Integer mValueUint32;
    private Integer mValueInt32;
    private Boolean mValueBool;
    private String mValueString;

    public GmKeyValue()
    {

    }

    public GmKeyValue(
        Integer mParam
    )
    {
        this.mParam = mParam;
    }

    // getters and setters

    // mParam

    public Integer getMParam()
    {
        return mParam;
    }


    public void setMParam(Integer mParam)
    {
        this.mParam = mParam;
    }

    // mValueUint64

    public Long getMValueUint64()
    {
        return mValueUint64;
    }


    public void setMValueUint64(Long mValueUint64)
    {
        this.mValueUint64 = mValueUint64;
    }

    // mValueInt64

    public Long getMValueInt64()
    {
        return mValueInt64;
    }


    public void setMValueInt64(Long mValueInt64)
    {
        this.mValueInt64 = mValueInt64;
    }

    // mValueUint32

    public Integer getMValueUint32()
    {
        return mValueUint32;
    }


    public void setMValueUint32(Integer mValueUint32)
    {
        this.mValueUint32 = mValueUint32;
    }

    // mValueInt32

    public Integer getMValueInt32()
    {
        return mValueInt32;
    }


    public void setMValueInt32(Integer mValueInt32)
    {
        this.mValueInt32 = mValueInt32;
    }

    // mValueBool

    public Boolean getMValueBool()
    {
        return mValueBool;
    }


    public void setMValueBool(Boolean mValueBool)
    {
        this.mValueBool = mValueBool;
    }

    // mValueString

    public String getMValueString()
    {
        return mValueString;
    }


    public void setMValueString(String mValueString)
    {
        this.mValueString = mValueString;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final GmKeyValue that = (GmKeyValue) obj;
        return
                Objects.equals(this.mParam, that.mParam) &&
                Objects.equals(this.mValueUint64, that.mValueUint64) &&
                Objects.equals(this.mValueInt64, that.mValueInt64) &&
                Objects.equals(this.mValueUint32, that.mValueUint32) &&
                Objects.equals(this.mValueInt32, that.mValueInt32) &&
                Objects.equals(this.mValueBool, that.mValueBool) &&
                Objects.equals(this.mValueString, that.mValueString);
    }

    @Override
    public int hashCode() {
        return Objects.hash(mParam, mValueUint64, mValueInt64, mValueUint32, mValueInt32, mValueBool, mValueString);
    }

    @Override
    public String toString() {
        return "GmKeyValue{" +
                    "mParam=" + mParam +
                    ", mValueUint64=" + mValueUint64 +
                    ", mValueInt64=" + mValueInt64 +
                    ", mValueUint32=" + mValueUint32 +
                    ", mValueInt32=" + mValueInt32 +
                    ", mValueBool=" + mValueBool +
                    ", mValueString=" + mValueString +
                '}';
    }
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<GmKeyValue> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public GmKeyValue newMessage()
    {
        return new GmKeyValue();
    }

    public Class<GmKeyValue> typeClass()
    {
        return GmKeyValue.class;
    }

    public String messageName()
    {
        return GmKeyValue.class.getSimpleName();
    }

    public String messageFullName()
    {
        return GmKeyValue.class.getName();
    }

    public boolean isInitialized(GmKeyValue message)
    {
        return 
            message.mParam != null;
    }

    public void mergeFrom(Input input, GmKeyValue message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.mParam = input.readUInt32();
                    break;
                case 2:
                    message.mValueUint64 = input.readUInt64();
                    break;
                case 3:
                    message.mValueInt64 = input.readInt64();
                    break;
                case 4:
                    message.mValueUint32 = input.readUInt32();
                    break;
                case 5:
                    message.mValueInt32 = input.readInt32();
                    break;
                case 6:
                    message.mValueBool = input.readBool();
                    break;
                case 7:
                    message.mValueString = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, GmKeyValue message) throws IOException
    {
        if(message.mParam == null)
            throw new UninitializedMessageException(message);
        output.writeUInt32(1, message.mParam, false);

        if(message.mValueUint64 != null)
            output.writeUInt64(2, message.mValueUint64, false);

        if(message.mValueInt64 != null)
            output.writeInt64(3, message.mValueInt64, false);

        if(message.mValueUint32 != null)
            output.writeUInt32(4, message.mValueUint32, false);

        if(message.mValueInt32 != null)
            output.writeInt32(5, message.mValueInt32, false);

        if(message.mValueBool != null)
            output.writeBool(6, message.mValueBool, false);

        if(message.mValueString != null)
            output.writeString(7, message.mValueString, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    

}
