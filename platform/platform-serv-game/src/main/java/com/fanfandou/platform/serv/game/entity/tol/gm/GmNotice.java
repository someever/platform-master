// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package com.fanfandou.platform.serv.game.entity.tol.gm;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Objects;


@Generated("java_bean")
public final class GmNotice implements Externalizable, Message<GmNotice>, Schema<GmNotice>
{

    public static Schema<GmNotice> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static GmNotice getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final GmNotice DEFAULT_INSTANCE = new GmNotice();

    
    private String mNoticeStr;
    private Long mBeginTime;
    private Long mEndTime;
    private Integer mLoopCount;

    public GmNotice()
    {

    }

    // getters and setters

    // mNoticeStr

    public String getMNoticeStr()
    {
        return mNoticeStr;
    }


    public void setMNoticeStr(String mNoticeStr)
    {
        this.mNoticeStr = mNoticeStr;
    }

    // mBeginTime

    public Long getMBeginTime()
    {
        return mBeginTime;
    }


    public void setMBeginTime(Long mBeginTime)
    {
        this.mBeginTime = mBeginTime;
    }

    // mEndTime

    public Long getMEndTime()
    {
        return mEndTime;
    }


    public void setMEndTime(Long mEndTime)
    {
        this.mEndTime = mEndTime;
    }

    // mLoopCount

    public Integer getMLoopCount()
    {
        return mLoopCount;
    }


    public void setMLoopCount(Integer mLoopCount)
    {
        this.mLoopCount = mLoopCount;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final GmNotice that = (GmNotice) obj;
        return
                Objects.equals(this.mNoticeStr, that.mNoticeStr) &&
                Objects.equals(this.mBeginTime, that.mBeginTime) &&
                Objects.equals(this.mEndTime, that.mEndTime) &&
                Objects.equals(this.mLoopCount, that.mLoopCount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(mNoticeStr, mBeginTime, mEndTime, mLoopCount);
    }

    @Override
    public String toString() {
        return "GmNotice{" +
                    "mNoticeStr=" + mNoticeStr +
                    ", mBeginTime=" + mBeginTime +
                    ", mEndTime=" + mEndTime +
                    ", mLoopCount=" + mLoopCount +
                '}';
    }
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<GmNotice> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public GmNotice newMessage()
    {
        return new GmNotice();
    }

    public Class<GmNotice> typeClass()
    {
        return GmNotice.class;
    }

    public String messageName()
    {
        return GmNotice.class.getSimpleName();
    }

    public String messageFullName()
    {
        return GmNotice.class.getName();
    }

    public boolean isInitialized(GmNotice message)
    {
        return true;
    }

    public void mergeFrom(Input input, GmNotice message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.mNoticeStr = input.readString();
                    break;
                case 2:
                    message.mBeginTime = input.readUInt64();
                    break;
                case 3:
                    message.mEndTime = input.readUInt64();
                    break;
                case 4:
                    message.mLoopCount = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, GmNotice message) throws IOException
    {
        if(message.mNoticeStr != null)
            output.writeString(1, message.mNoticeStr, false);

        if(message.mBeginTime != null)
            output.writeUInt64(2, message.mBeginTime, false);

        if(message.mEndTime != null)
            output.writeUInt64(3, message.mEndTime, false);

        if(message.mLoopCount != null)
            output.writeUInt32(4, message.mLoopCount, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    

}
