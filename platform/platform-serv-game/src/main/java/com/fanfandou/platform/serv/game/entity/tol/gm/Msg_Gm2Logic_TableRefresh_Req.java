// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package com.fanfandou.platform.serv.game.entity.tol.gm;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


@Generated("java_bean")
public final class Msg_Gm2Logic_TableRefresh_Req implements Externalizable, Message<Msg_Gm2Logic_TableRefresh_Req>, Schema<Msg_Gm2Logic_TableRefresh_Req>
{

    public static Schema<Msg_Gm2Logic_TableRefresh_Req> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Msg_Gm2Logic_TableRefresh_Req getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Msg_Gm2Logic_TableRefresh_Req DEFAULT_INSTANCE = new Msg_Gm2Logic_TableRefresh_Req();

    
    private String mSerialNumber;
    private String mTableName;
    private List<GmTableValueList> mRows;

    public Msg_Gm2Logic_TableRefresh_Req()
    {

    }

    // getters and setters

    // mSerialNumber

    public String getMSerialNumber()
    {
        return mSerialNumber;
    }


    public void setMSerialNumber(String mSerialNumber)
    {
        this.mSerialNumber = mSerialNumber;
    }

    // mTableName

    public String getMTableName()
    {
        return mTableName;
    }


    public void setMTableName(String mTableName)
    {
        this.mTableName = mTableName;
    }

    // mRows

    public List<GmTableValueList> getMRowsList()
    {
        return mRows;
    }


    public void setMRowsList(List<GmTableValueList> mRows)
    {
        this.mRows = mRows;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final Msg_Gm2Logic_TableRefresh_Req that = (Msg_Gm2Logic_TableRefresh_Req) obj;
        return
                Objects.equals(this.mSerialNumber, that.mSerialNumber) &&
                Objects.equals(this.mTableName, that.mTableName) &&
                Objects.equals(this.mRows, that.mRows);
    }

    @Override
    public int hashCode() {
        return Objects.hash(mSerialNumber, mTableName, mRows);
    }

    @Override
    public String toString() {
        return "Msg_Gm2Logic_TableRefresh_Req{" +
                    "mSerialNumber=" + mSerialNumber +
                    ", mTableName=" + mTableName +
                    ", mRows=" + mRows +
                '}';
    }
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Msg_Gm2Logic_TableRefresh_Req> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Msg_Gm2Logic_TableRefresh_Req newMessage()
    {
        return new Msg_Gm2Logic_TableRefresh_Req();
    }

    public Class<Msg_Gm2Logic_TableRefresh_Req> typeClass()
    {
        return Msg_Gm2Logic_TableRefresh_Req.class;
    }

    public String messageName()
    {
        return Msg_Gm2Logic_TableRefresh_Req.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Msg_Gm2Logic_TableRefresh_Req.class.getName();
    }

    public boolean isInitialized(Msg_Gm2Logic_TableRefresh_Req message)
    {
        return true;
    }

    public void mergeFrom(Input input, Msg_Gm2Logic_TableRefresh_Req message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.mSerialNumber = input.readString();
                    break;
                case 2:
                    message.mTableName = input.readString();
                    break;
                case 3:
                    if(message.mRows == null)
                        message.mRows = new ArrayList<GmTableValueList>();
                    message.mRows.add(input.mergeObject(null, GmTableValueList.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, Msg_Gm2Logic_TableRefresh_Req message) throws IOException
    {
        if(message.mSerialNumber != null)
            output.writeString(1, message.mSerialNumber, false);

        if(message.mTableName != null)
            output.writeString(2, message.mTableName, false);

        if(message.mRows != null)
        {
            for(GmTableValueList mRows : message.mRows)
            {
                if(mRows != null)
                    output.writeObject(3, mRows, GmTableValueList.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    

}
