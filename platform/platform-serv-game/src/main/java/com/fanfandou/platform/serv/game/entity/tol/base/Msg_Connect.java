// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package com.fanfandou.platform.serv.game.entity.tol.base;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;
import io.protostuff.UninitializedMessageException;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Objects;

@Generated("java_bean")
public final class Msg_Connect implements Externalizable, Message<Msg_Connect>, Schema<Msg_Connect>
{

    public static Schema<Msg_Connect> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Msg_Connect getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Msg_Connect DEFAULT_INSTANCE = new Msg_Connect();

    
    private Integer mType;
    private Integer mId;
    private String mIp;
    private Integer mPort;

    public Msg_Connect()
    {

    }

    public Msg_Connect(
        Integer mType
    )
    {
        this.mType = mType;
    }

    // getters and setters

    // mType

    public Integer getMType()
    {
        return mType;
    }


    public void setMType(Integer mType)
    {
        this.mType = mType;
    }

    // mId

    public Integer getMId()
    {
        return mId;
    }


    public void setMId(Integer mId)
    {
        this.mId = mId;
    }

    // mIp

    public String getMIp()
    {
        return mIp;
    }


    public void setMIp(String mIp)
    {
        this.mIp = mIp;
    }

    // mPort

    public Integer getMPort()
    {
        return mPort;
    }


    public void setMPort(Integer mPort)
    {
        this.mPort = mPort;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final Msg_Connect that = (Msg_Connect) obj;
        return
                Objects.equals(this.mType, that.mType) &&
                Objects.equals(this.mId, that.mId) &&
                Objects.equals(this.mIp, that.mIp) &&
                Objects.equals(this.mPort, that.mPort);
    }

    @Override
    public int hashCode() {
        return Objects.hash(mType, mId, mIp, mPort);
    }

    @Override
    public String toString() {
        return "Msg_Connect{" +
                    "mType=" + mType +
                    ", mId=" + mId +
                    ", mIp=" + mIp +
                    ", mPort=" + mPort +
                '}';
    }
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Msg_Connect> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Msg_Connect newMessage()
    {
        return new Msg_Connect();
    }

    public Class<Msg_Connect> typeClass()
    {
        return Msg_Connect.class;
    }

    public String messageName()
    {
        return Msg_Connect.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Msg_Connect.class.getName();
    }

    public boolean isInitialized(Msg_Connect message)
    {
        return 
            message.mType != null;
    }

    public void mergeFrom(Input input, Msg_Connect message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.mType = input.readUInt32();
                    break;
                case 2:
                    message.mId = input.readUInt32();
                    break;
                case 3:
                    message.mIp = input.readString();
                    break;
                case 4:
                    message.mPort = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, Msg_Connect message) throws IOException
    {
        if(message.mType == null)
            throw new UninitializedMessageException(message);
        output.writeUInt32(1, message.mType, false);

        if(message.mId != null)
            output.writeUInt32(2, message.mId, false);

        if(message.mIp != null)
            output.writeString(3, message.mIp, false);

        if(message.mPort != null)
            output.writeUInt32(4, message.mPort, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    

}
