// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package com.fanfandou.platform.serv.game.entity.tol.gm;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


@Generated("java_bean")
public final class GmKeyValueList implements Externalizable, Message<GmKeyValueList>, Schema<GmKeyValueList>
{

    public static Schema<GmKeyValueList> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static GmKeyValueList getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final GmKeyValueList DEFAULT_INSTANCE = new GmKeyValueList();

    
    private List<GmKeyValue> mValues = new ArrayList<>();

    public GmKeyValueList()
    {

    }

    // getters and setters

    // mValues

    public List<GmKeyValue> getMValuesList()
    {
        return mValues;
    }


    public void setMValuesList(List<GmKeyValue> mValues)
    {
        this.mValues = mValues;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final GmKeyValueList that = (GmKeyValueList) obj;
        return
                Objects.equals(this.mValues, that.mValues);
    }

    @Override
    public int hashCode() {
        return Objects.hash(mValues);
    }

    @Override
    public String toString() {
        return "GmKeyValueList{" +
                    "mValues=" + mValues +
                '}';
    }
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<GmKeyValueList> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public GmKeyValueList newMessage()
    {
        return new GmKeyValueList();
    }

    public Class<GmKeyValueList> typeClass()
    {
        return GmKeyValueList.class;
    }

    public String messageName()
    {
        return GmKeyValueList.class.getSimpleName();
    }

    public String messageFullName()
    {
        return GmKeyValueList.class.getName();
    }

    public boolean isInitialized(GmKeyValueList message)
    {
        return true;
    }

    public void mergeFrom(Input input, GmKeyValueList message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.mValues == null)
                        message.mValues = new ArrayList<GmKeyValue>();
                    message.mValues.add(input.mergeObject(null, GmKeyValue.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, GmKeyValueList message) throws IOException
    {
        if(message.mValues != null)
        {
            for(GmKeyValue mValues : message.mValues)
            {
                if(mValues != null)
                    output.writeObject(1, mValues, GmKeyValue.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    

}
