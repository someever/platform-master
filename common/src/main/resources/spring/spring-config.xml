<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <context:component-scan base-package="com.fanfandou" >
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <aop:aspectj-autoproxy />
    <!-- 引入属性文件 -->
    <context:property-placeholder location="classpath*:*.properties"/>
    <!-- 配置数据源 -->
    <bean id="abstractDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="4" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="40" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 1" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat" />
    </bean>

    <bean id="readDS" parent="abstractDataSource" init-method="init">
        <property name="url" value="${jdbc.read.url}" />
        <property name="username" value="${jdbc.read.user}" />
        <property name="password" value="${jdbc.read.password}" />
    </bean>

    <bean id="writeDS" parent="abstractDataSource" init-method="init">
        <property name="url" value="${jdbc.write.url}" />
        <property name="username" value="${jdbc.write.user}" />
        <property name="password" value="${jdbc.write.password}" />
    </bean>
    <!-- 读写分离 -->
    <bean id="dataSource" class="com.fanfandou.common.db.DynamicDataSource">
        <property name="targetDataSources">
            <map>
                <entry key="read" value-ref="readDS"/>
                <entry key="write" value-ref="writeDS"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="writeDS"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <property name="mapperLocations" value="classpath*:mybatis/mappers/**/*.xml" />
        <property name="typeAliasesPackage" value="com.fanfandou"/>
    </bean>
    <!-- Transaction manager for a single JDBC DataSource -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.fanfandou.**.dao" />
    </bean>
    <!--<import resource="classpath*:spring/**.xml" />-->
</beans>